---
backup_notifications:
  enabled: false
  apprise_target: ""
  requirements:
    - python3
    - python3-pip
    - python3-setuptools


pg_remote:
  database_name: test
  name_backup: super-backup
  database_user: test
  database_password: test
  database_host: localhost
  database_port: 5433

mysql_docker:
  database_name: test
  name_backup: super-backup_mysql
  database_user: test
  database_password: test
  container_name: name


backup:
  aws_access_key: ""
  aws_secret_key: ""
  aws_endpoint: enpoint
  databases:
  - name_backup: super-bassdsds
    database_type: pg_remote
    tmp_dir: /tmp
    database_name: name
    aws_dest: ""
    aws_endpoint: ""
    retain_count: 5
    filter_date: '"5 min ago"'
    use_local: "" #Use for save backups in the host. Use "" for False.
    cron:
        minute: "*"
        hour: "*"
        day: "*"
        weekday: "*"
        month: "*"
  - name_backup: super-bassdsds
    database_type: mysql_docker
    tmp_dir: /tmp
    container_name: name
    database_name: name
    aws_dest: ""
    aws_endpoint: ""
    retain_count: 5
    filter_date: '"5 min ago"'
    cron:
        minute: "*"
        hour: "*"
        day: "*"
        weekday: "*"
        month: "*"
  - name: "example_db"
    database_type: "postgresql"
    cron_minute: "0"
    cron_hour: "2"
  docker_image: "backup_container:latest"

## Использование роли

Эта роль создает резервные копии баз данных в Docker-контейнере. Контейнер собирается на основе легкого образа PostgreSQL и содержит все необходимые скрипты и конфигурации.

### Параметры

- `backup.databases`: Список баз данных для резервного копирования.
- `backup.docker_image`: Имя Docker-образа для резервного копирования.

### Пример использования

```yaml
- hosts: all
  roles:
    - backup_universal
